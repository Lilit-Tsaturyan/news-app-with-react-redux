{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchPosts } from \"./postsAPI\";\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    editId: null,\n    data: [],\n    dataMore: {},\n    max: 0,\n    loading: false\n  },\n  reducers: {\n    addNewComment(state, _ref) {\n      let {\n        payload\n      } = _ref;\n\n      if (payload.body) {\n        return { ...state,\n          dataMore: { ...state.dataMore,\n            comments: [...state.dataMore.comments, {\n              id: new Date().getTime(),\n              body: payload.body,\n              name: payload.name\n            }]\n          },\n          data: [...state.data.map(el => {\n            if (el.id === state.dataMore.id) {\n              return { ...state.dataMore,\n                comments: [...state.dataMore.comments, {\n                  id: new Date().getTime(),\n                  body: payload.body,\n                  name: payload.name\n                }]\n              };\n            }\n\n            return el;\n          })]\n        };\n      }\n\n      return state;\n    },\n\n    setDataMore(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      return { ...state,\n        dataMore: state.data.find(el => el.id === payload)\n      };\n    },\n\n    deleteText(state, action) {\n      return { ...state,\n        dataMore: { ...state.dataMore,\n          comments: [...state.dataMore.comments.filter(comment => comment.id !== action.payload)]\n        },\n        data: [...state.data.map(el => {\n          if (el.id === state.dataMore.id) {\n            return { ...state.dataMore,\n              comments: [...state.dataMore.comments.filter(comment => comment.id !== action.payload)]\n            };\n          }\n\n          return el;\n        })]\n      };\n    },\n\n    setEditId(state, _ref3) {\n      let {\n        payload\n      } = _ref3;\n      return { ...state,\n        editId: payload\n      };\n    },\n\n    editComment(state, _ref4) {\n      let {\n        payload\n      } = _ref4;\n      return { ...state,\n        dataMore: { ...state.dataMore,\n          comments: [...state.dataMore.comments.map(el => {\n            if (el.id === state.editId) {\n              return { ...el,\n                name: payload.name,\n                body: payload.comment\n              };\n            }\n\n            return el;\n          })]\n        },\n        data: [...state.data.map(el => {\n          if (el.id === state.dataMore.id) {\n            return { ...state.dataMore,\n              comments: [...state.dataMore.comments.map(el => {\n                if (el.id === state.editId) {\n                  return { ...el,\n                    name: payload.name,\n                    body: payload.comment\n                  };\n                }\n\n                return el;\n              })]\n            };\n          }\n\n          return el;\n        })],\n        editId: null\n      };\n    }\n\n  },\n  extraReducers: {\n    [fetchPosts.fulfilled]: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      return { ...state,\n        data: [...payload],\n        max: payload.length,\n        showData: payload.splice(0, 10)\n      };\n    }\n  }\n});\nexport const selectPosts = state => state.posts;\nexport const {\n  editComment,\n  addNewComment,\n  setEditId,\n  setDataMore,\n  deleteText\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","fetchPosts","postsSlice","name","initialState","editId","data","dataMore","max","loading","reducers","addNewComment","state","payload","body","comments","id","Date","getTime","map","el","setDataMore","find","deleteText","action","filter","comment","setEditId","editComment","extraReducers","fulfilled","length","showData","splice","selectPosts","posts","actions","reducer"],"sources":["/Users/tumolabsstudent/Desktop/NEWS-Lilit/src/store/slices/posts/postsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchPosts } from \"./postsAPI\";\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    editId: null,\n    data: [],\n    dataMore: {},\n    max: 0,\n    loading: false,\n  },\n\n  reducers: {\n    addNewComment(state, { payload }) {\n      if (payload.body) {\n        return {\n          ...state,\n          dataMore: {\n            ...state.dataMore,\n            comments: [\n              ...state.dataMore.comments,\n              {\n                id: new Date().getTime(),\n                body: payload.body,\n                name: payload.name,\n              },\n            ],\n          },\n          data: [\n            ...state.data.map((el) => {\n              if (el.id === state.dataMore.id) {\n                return {\n                  ...state.dataMore,\n                  comments: [\n                    ...state.dataMore.comments,\n                    {\n                      id: new Date().getTime(),\n                      body: payload.body,\n                      name: payload.name,\n                    },\n                  ],\n                };\n              }\n              return el;\n            }),\n          ],\n        };\n      }\n      return state;\n    },\n\n    setDataMore(state, { payload }) {\n      return {\n        ...state,\n        dataMore: state.data.find((el) => el.id === payload),\n      };\n    },\n\n    deleteText(state, action) {\n      return {\n        ...state,\n        dataMore: {\n          ...state.dataMore,\n          comments: [\n            ...state.dataMore.comments.filter(\n              (comment) => comment.id !== action.payload\n            ),\n          ],\n        },\n        data: [\n          ...state.data.map((el) => {\n            if (el.id === state.dataMore.id) {\n              return {\n                ...state.dataMore,\n                comments: [\n                  ...state.dataMore.comments.filter(\n                    (comment) => comment.id !== action.payload\n                  ),\n                ],\n              };\n            }\n            return el;\n          }),\n        ],\n      };\n    },\n\n    setEditId(state, { payload }) {\n      return {\n        ...state,\n        editId: payload,\n      };\n    },\n\n    editComment(state, { payload }) {\n      return {\n        ...state,\n        dataMore: {\n          ...state.dataMore,\n          comments: [\n            ...state.dataMore.comments.map((el) => {\n              if (el.id === state.editId) {\n                return {\n                  ...el,\n                  name: payload.name,\n                  body: payload.comment,\n                };\n              }\n              return el;\n            }),\n          ],\n        },\n        data: [\n          ...state.data.map((el) => {\n            if (el.id === state.dataMore.id) {\n              return {\n                ...state.dataMore,\n                comments: [\n                  ...state.dataMore.comments.map((el) => {\n                    if (el.id === state.editId) {\n                      return {\n                        ...el,\n                        name: payload.name,\n                        body: payload.comment,\n                      };\n                    }\n                    return el;\n                  }),\n                ],\n              };\n            }\n            return el;\n          }),\n        ],\n        editId: null,\n      };\n    },\n  },\n\n  extraReducers: {\n    [fetchPosts.fulfilled]: (state, { payload }) => {\n      return {\n        ...state,\n        data: [...payload],\n        max: payload.length,\n        showData: payload.splice(0, 10),\n      };\n    },\n  },\n});\n\nexport const selectPosts = (state) => state.posts;\n\nexport const {\n  editComment,\n  addNewComment,\n  setEditId,\n  setDataMore,\n  deleteText,\n} = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}